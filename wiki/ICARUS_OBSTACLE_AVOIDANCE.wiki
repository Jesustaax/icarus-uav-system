#summary One-sentence summary of this page.

[ICARUS_OBSTACLE_AVOIDANCE#Operation Operating Instructions]
[https://bitbucket.org/davidgitz/icarus_oa ROS Source Code]
[https://www.dropbox.com/sh/5k0mwuku06bbsmt/agLkb_57Lh Propeller Source Code]

[PrimaryController Primary Controller]
[FlightController Flight Controller]
[MotionController Motion Controller]

= Introduction =

== Summary ==
This project builds upon the previous project, [ICARUS_SLAM].  This project also uses the Quickstart and QuickstartPlus, along with Ultrasonic sensors and an AI algorithm to provide obstacle avoidance.  This can be used in cluttered environments, such as office spaces.


== Basic Operation ==


= Tasks =
 * CAD Conceptual Design
 * Dev Code for MC to measure distances, receive motor commands and output motor commands.
 * Develop algorithm relating distances and input/output motor commands.
 * 



= Milestones =


= Media =

[http://dgitz.ipower.com/ICARUSRepo/Media/Projects/ICARUS_OA/Flyer_AssywBeams.png]
ICARUS Flyer w/ Ultrasonic Beams

[https://www.dropbox.com/s/3723pg8ld2cp65k/ProgramFlowchart.pptx Software Flowchart]

[https://www.dropbox.com/s/qtkywga5dyuwr1r/Software%20Documentation.docx Software Documentation]

= Installation/Development Instructions =

== Compiling ==
{{{

}}}


== Commit ==
 # Add any uncommitted files:
{{{
git add .
}}}
 # Make a comment on the commit and then push it to the main branch.
{{{
git commit -m "Comment Text"
git push -u origin master
}}}

= Operation =
== Headless ==
 * In Terminal 1:
{{{
roscore
}}}

 * In Terminal 2:
{{{
roslaunch oa slow_computer2.launch
}}}
 
 * In Terminal 3:
{{{
sudo chmod 0777 /dev/ttyACM0
rosservice call /oa/ros_ui_b pause false
}}}

Execute the main program with the following:
{{{
python nodes/primarycontroller.py
}}}
The following options are available.  Use the text in the <> where applicable, | signifies different options, and omit the <> and |:
 * Connection to GCS (Transmit GPS and Attitude Completed)
{{{
--gcs-device-type=<udp|Serial>
--gcs-device=<Device> #Where Device is an IP address if the type is udp, or a Serial Device such as /dev/ttyUSB0 or /dev/ttyACM0
--gcs-device-speed=<Speed> #Where Speed is a compatible baud rate if the type is Serial (default is 115200) and not used the type is udp 
}}}
 * Connection to Flight Controller (Receive Attitude Completed)
{{{
--fc-device-type=<udp|Serial>
--fc-device=<Device> #Where Device is an IP address if the type is udp, or a Serial Device such as /dev/ttyUSB0 or /dev/ttyACM0
--fc-device-speed=<Speed> #Where Speed is a compatible baud rate if the type is Serial (default is 115200) and not used the type is udp 
}}}
 * Connection to Flight Controller GPS (In Progress)
{{{
--fcgps-device-type=<udp|Serial>
--fcgps-device=<Device> #Where Device is an IP address if the type is udp, or a Serial Device such as /dev/ttyUSB0 or /dev/ttyACM0
--fcgps-device-speed=<Speed> #Where Speed is a compatible baud rate if the type is Serial (default is 115200) and not used the type is udp 
}}}
 * Connection to Motion Controller (In Progress)
{{{
--mc-device-type=<udp|Serial>
--mc-device=<Device> #Where Device is an IP address if the type is udp, or a Serial Device such as /dev/ttyUSB0 or /dev/ttyACM0
--mc-device-speed=<Speed> #Where Speed is a compatible baud rate if the type is Serial (default is 115200) and not used the type is udp 
}}}
 * Connection to Remote (Transmit GPS and Attitude In Progress)
{{{
--remote-device-type=<udp|Serial>
--remote-device=<Device> #Where Device is an IP address if the type is udp, or a Serial Device such as /dev/ttyUSB0 or /dev/ttyACM0
--remote-device-speed=<Speed> #Where Speed is a compatible baud rate if the type is Serial (default is 115200) and not used the type is udp 
}}}

 * Example
{{{
oa/nodes/primarycontroller.py --fcgps-device-type=Serial --fcgps-device=/dev/ttyUSB0 --fc-device-type=Serial --fc-device=/dev/ttyACM0 --gcs-device-type=udp --gcs-device=10.7.45.208
}}}

== GUI ==
 * In Terminal 1:
{{{
roscore
}}}

 * In Terminal 2:
{{{
rosrun rviz rviz
}}}

 * In Terminal 3:
{{{
roslaunch oa slow_computer2.launch
}}}
When GUI opens, press SPACE.
In RVIZ, Global Status should turn from ERROR to OK after moving.
 * In Terminal 4:
{{{
rosrun tf tf_echo /map /camera_link
}}}