#summary One-sentence summary of this page.

[ICARUS_OBSTACLE_AVOIDANCE#Operation Operating Instructions]
[https://bitbucket.org/uicrobotics/icarus_oa ROS Source Code]
[https://www.dropbox.com/sh/5k0mwuku06bbsmt/agLkb_57Lh Propeller Source Code]

[PrimaryController Primary Controller]
[FlightController Flight Controller]
[MotionController Motion Controller]


= Milestones =
  * Design and Fabricate Sonic Sensor mounts (DONE)
  * Design and Fabricate Sonic Sensor Board for Daisy Chaining (DONE)
  * Install Sonic Sensors on UAV 
  * Calibrate Sensors to real Distances (INW)
  * Dev code for Force Mapping Algorithm (DONE)
  * Dev Code to acquire Sensor values. (DONE)
  * Test & Refine OA Code (Not Started)
= Introduction =

== Summary ==
This project builds upon the previous project, [ICARUS_SLAM].  This project also uses the Quickstart and QuickstartPlus, along with Ultrasonic sensors and a Force Mapping algorithm to provide obstacle avoidance.  This can be used in cluttered environments, such as office spaces.

== Basic Operation ==

This project employs obstacle avoidance using Ultrasonic Sensors placed around the UAV.  These Sensors are placed at the Front, Left, Right, Back, Top and Bottom of the UAV.

The Ultrasonic Sensors have very little resolution, as they only report back the distance to the nearest obstacle they see.  But, since they have a fairly wide field of view and they consume little system resources (memory, space, weight, energy, etc) and they respond quickly to changes in their environment they are used to provide immediate feedback to the Force Mapping Algorithm used to adjust the motor speeds to avoid obstacles they perceive.

== Force Mapping Algorithm ==

The Force Mapping Algorithm is fairly simple as the UAV requires 
[http://dgitz.ipower.com/ICARUSRepo/Media/Projects/ICARUS_OA/ForceMapping.png]





= Media =

[http://dgitz.ipower.com/ICARUSRepo/Media/Projects/ICARUS_OA/Flyer_Assy.png]
ICARUS Flyer

[http://dgitz.ipower.com/ICARUSRepo/Media/Projects/ICARUS_OA/Flyer_Assy_Detail.png]
ICARUS Flyer Detail

[http://dgitz.ipower.com/ICARUSRepo/Media/Projects/ICARUS_OA/Flyer_AssywUltrasonicBeams.png]

ICARUS Flyer w/ Ultrasonic Beams

[http://dgitz.ipower.com/ICARUSRepo/Media/Projects/ICARUS_OA/Flyer_AssywKinectFOV.png]

ICARUS Flyer w/ Kinect Field of View for Visible and IR Camera

[http://dgitz.ipower.com/ICARUSRepo/Media/Projects/ICARUS_OA/Flyer_AssywEverything.png]

ICARUS Flyer w/ Kinect Field of View and Ultrasonic Beams

[https://www.dropbox.com/s/3723pg8ld2cp65k/ProgramFlowchart.pptx Software Flowchart]

[https://www.dropbox.com/s/qtkywga5dyuwr1r/Software%20Documentation.docx Software Documentation]

= Installation/Development Instructions =

== Compiling ==
{{{

}}}


== Commit ==
 # Add any uncommitted files:
{{{
git add .
}}}
 # Make a comment on the commit and then push it to the main branch.
{{{
git commit -m "Comment Text"
git push -u origin master
}}}

= Operation =
== Headless ==
 * In Terminal 1:
{{{
roscore
}}}

 * In Terminal 2:
{{{
roslaunch oa slow_computer2.launch
}}}
 
 * In Terminal 3:
{{{
sudo chmod 0777 /dev/ttyACM0
}}}

Execute the main program with the following:
{{{
roscd icarus_oa
python oa/nodes/primarycontroller.py
}}}
The following options are available.  Use the text in the <> where applicable, | signifies different options, and omit the <> and |:
 * Connection to GCS (Transmit GPS and Attitude Completed)
{{{
--gcs-device-type=<udp|Serial>
--gcs-device=<Device> #Where Device is an IP address if the type is udp, or a Serial Device such as /dev/ttyUSB0 or /dev/ttyACM0
--gcs-device-speed=<Speed> #Where Speed is a compatible baud rate if the type is Serial (default is 115200) and if not used the type is udp 
}}}
 * Connection to Flight Controller (Receive Attitude Completed)
{{{
--fc-device-type=<udp|Serial>
--fc-device=<Device> #Where Device is an IP address if the type is udp, or a Serial Device such as /dev/ttyUSB0 or /dev/ttyACM0
--fc-device-speed=<Speed> #Where Speed is a compatible baud rate if the type is Serial (default is 115200) and not used the type is udp 
}}}
 * Connection to Flight Controller GPS
{{{
--fcgps-device-type=<udp|Serial>
--fcgps-device=<Device> #Where Device is an IP address if the type is udp, or a Serial Device such as /dev/ttyUSB0 or /dev/ttyACM0
--fcgps-device-speed=<Speed> #Where Speed is a compatible baud rate if the type is Serial (default is 115200) and not used the type is udp 
}}}
 * Connection to Motion Controller
{{{
--mc-device-type=<Serial>
--mc-device=<Device> #Where Device is a Serial Device such as /dev/ttyUSB0 or /dev/ttyACM0
--mc-device-speed=<Speed> #Where Speed is a compatible baud rate
}}}
 * Connection to Remote (Transmit GPS and Attitude In Progress)
{{{
--remote-device-type=<udp|Serial>
--remote-device=<Device> #Where Device is an IP address if the type is udp, or a Serial Device such as /dev/ttyUSB0 or /dev/ttyACM0
--remote-device-speed=<Speed> #Where Speed is a compatible baud rate if the type is Serial (default is 115200) and not used the type is udp 
}}}

 * Example
{{{
oa/nodes/primarycontroller.py --fcgps-device-type=Serial --fcgps-device=/dev/ttyUSB0 --fc-device-type=Serial --fc-device=/dev/ttyACM0 --gcs-device-type=udp --gcs-device=10.7.45.208
}}}

= References =