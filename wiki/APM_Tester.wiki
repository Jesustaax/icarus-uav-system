#summary APM_Tester

[APM_Tester#Operating-Instructions Operating Instructions]

[https://bitbucket.org/uicrobotics/apm_tester/src Source Code]

[https://bitbucket.org/uicrobotics/apm_tester/issues?status=new&status=open Code Issues]

= Introduction =

The objective of this project was to analyze and provide documentation on the precision and accuracy of the Ardupilot Mega, or APM.  The APM is a fantastic piece of engineering marvel created by 3D Robotics and improved upon by the DIYDrones community, and is one of the most popular and cheapest autopilot systems for robots available.  However, there is a significant lack of proper engineering data, such as how stable the board is overtime, how accurate it is, etc. that prompted this project.

At the UIC Robotics Lab, we also have access to a few PUMA Robot Manipulators.  It was determined this would be a good platform to test the APM on, as it is a stable and accurate robot arm with many more degrees of freedom than are measured by the APM.

Although all the design and software information is made available on this site, it is not intended that this project would be replicated (unless for verification purposes) as the PUMA robot is not a common fixture in a robotics lab.  This webpage is more intended to document the way the testing data was gathered for independent analysis and educational purposes.  However, if you would like to reproduce this project by all means go for it!  There are many lessons we learned along the way that will make this project easier the next time around.

Project Overview Video Part 1 Download

Final Project Report Download

Testing Data Download

= Tasks =
 * Send data over WiFi in ROS:DONE
 * apm_data_collector publishes attitude topic:DONE
 * Matlab program to analyze data:DONE
 * PUMA-ROS Driver

= Experiment Setup =

== Methodology ==

== Architecture ==

== Communications ==

== Equipment ==

=== Log/Display Computer ===

==== Source Code ====
[https://bitbucket.org/uicrobotics/apm_tester/src/babf9aa7067b66a3e1c1476b1e80d2d55d8f0617/Matlab?at=master Matlab Source Code]

=== PUMA Robot ===

==== Source Code ====

=== APM Tester ===
[http://dgitz.ipower.com/ICARUSRepo/Media/Projects/APM_Tester/APM_TestBox.jpg]

APM Test Box

[http://dgitz.ipower.com/ICARUSRepo/Media/Projects/APM_Tester/APM_TestBox2.jpg]

APM Test Box

==== Source Code ====

[https://bitbucket.org/uicrobotics/apm_tester/src/babf9aa7067b66a3e1c1476b1e80d2d55d8f0617/ROS%20Code/apm_data_collect?at=master APM Ros Code]

[https://github.com/mavlink/mavlink Github-MAVLink]

== Test Patterns ==

== Lessons Learned ==

= Operating-Instructions =
After installing all the appropriate software, perform the following actions:

 # Create a test profile for the PUMA Robot, and install the APM Test Box onto the Robot.
 # Plug in 3DR Radio into PUMA PC.
 # Turn on APM Test Box.
 # Wait for PUMA PC 3DR Radio to indicate it is paired with the APM Test Box (Green LED is steady on).
 # In a Linux-Ubuntu terminal, open a terminal and issue the command:
{{{
roscore
}}}
 # In another Linux-Ubuntu terminal, issue the commands:
{{{
rosmake apm_data_collector
roscd apm_data_collector
sudo chmod 0777 /dev/ttyUSB0
nodes/apm_data_collector.py --apm-device=/dev/ttyUSB0 --apm-baudrate=57600 --
}}}
Where USB0 is the usb device associated with the 3DR Radio.  If unsure, you can use 
{{{
lsusb -v
}}}
To determine the name of the usb device, and 57600 is the baudrate of the 3DR Radio.
 # 
 