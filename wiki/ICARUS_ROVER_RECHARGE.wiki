#summary Autonomous Recharging Documentation for the ICARUS Rover=
= Training Target Data =
Filename: capturedate.cvs
||Filename||Target1_x||Target1_y||Target2_x||Target2_y||

= Training Result Data =
Filename: filtermethod_detectmethod_capturedate_pickeddate.csv

||Threshold||Erode||Dilate||Score||FPS||

= Testing =
== Test Camera Operation ==
{{{
luvcview -d /dev/video1
--or--
sudo ./test
--or--
sudo ./tracking
}}}

= Operating Instructions =
== Perform Image Acquisition Process ==
 # Terminal 1:
{{{
roscore
}}}
 # Terminal 2:
{{{
cd ~/catkin_ws
source ./devel/setup.bash
roslaunch icarus_rover_rc acquire_train_images.launch 
}}}
Every time you left-click the image window it will save the image to a folder.
== Pick Targets from Training Images ==
 # Terminal 1:
{{{
roscore
}}}
 # Terminal 2:
{{{
cd ~/catkin_ws
source ./devel/setup.bash
roslaunch icarus_rover_rc pick_targets_from_train_images.launch 
}}}
For each image click at most 2 Targets.  If the image doesn't contain a Target right-click anywhere in the image.  Press space to see the selected targets (or nothing happens if right-click was pressed).  Press space again to advance to the next image.

== Tuning Process ==
=== Manual (non-EA) ===

=== Evolution Algorithm ===
[http://www.cs.vu.nl/~gusz/ecbook/Eiben-Smith-Intro2EC-Ch2.pdf Intro to EA]
The following functions need to be defined for an EA process:

*INITIALIZE*
Initialize 20 candidates with a random selection of Genes with the following specifications:

_GENE_ERODE_ Integer, between 1 and 11.  1 Meaning no Erosion process, so the Erosion process can be skipped.

_GENE_DILATE_ Integer, between 1 and 11.  1 Meaning no Dilation process, so the Dilation process can be skipped.

_GENE_THRESHOLD_ Integer, between 0 and 255.  

*EVALUATE*
Evaluate the image pre-processing with the feature detection method and compute the target_score and processing_score, where:
target_score is a piecewise function.

If a target is found and a target is present:
{{{
target_score = min(||found_target-target1||,||found_target-target2||)
}}}
If a target is found and no target is actually present:
{{{
target_score = image_width*image_height
}}}
If no target is found and a target is actually present:
{{{
target_score = image_width*image_height
}}}
If no target is found and no target is actually present:
{{{
target_score = 0
}}}


*SELECT*

*RECOMBINE*

*MUTATE*

= References =

http://stevenhickson.blogspot.com/2013/03/using-webcam-with-raspberry-pi.html

http://hackaday.com/2014/09/05/an-obsessively-thorough-battery-and-more-showdown/

http://www.ti.com/lit/an/snva557/snva557.pdf

http://docs.opencv.org/doc/tutorials/features2d/feature_detection/feature_detection.html

http://robocv.blogspot.com/2012/02/real-time-object-detection-in-opencv.html

http://find-object.googlecode.com/svn/trunk/find_object/example/main.cpp

https://github.com/savsun/Filters