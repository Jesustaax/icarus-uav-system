#summary Autonomous Recharging Documentation for the ICARUS Rover=
= Training Target Data =
Filename: capturedate.cvs
||Filename||Target1_x||Target1_y||Target2_x||Target2_y||

= Training Result Data =
Filename: filtermethod_detectmethod_capturedate_pickeddate.csv

||Threshold||Erode||Dilate||Score||FPS||

= Testing =
== Test Camera Operation ==
{{{
luvcview -d /dev/video1
--or--
sudo ./test
--or--
sudo ./tracking
}}}

= Operating Instructions =
== Perform Image Acquisition Process ==
 # Terminal 1:
{{{
roscore
}}}
 # Terminal 2:
{{{
cd ~/catkin_ws
source ./devel/setup.bash
roslaunch icarus_rover_rc acquire_train_images.launch 
}}}
Every time you left-click the image window it will save the image to a folder.
== Pick Targets from Training Images ==
 # Terminal 1:
{{{
roscore
}}}
 # Terminal 2:
{{{
cd ~/catkin_ws
source ./devel/setup.bash
roslaunch icarus_rover_rc pick_targets_from_train_images.launch 
}}}
For each image click at most 2 Targets.  If the image doesn't contain a Target right-click anywhere in the image.  Press space to see the selected targets (or nothing happens if right-click was pressed).  Press space again to advance to the next image.

== Tuning Process ==
=== Manual (non-EA) ===

=== Evolution Algorithm ===
[http://www.cs.vu.nl/~gusz/ecbook/Eiben-Smith-Intro2EC-Ch2.pdf Intro to EA]
The following functions need to be defined for an EA process:

*INITIALIZE*

Initialize 20 candidates (a population) with a random selection of Genes with the following specifications:

_GENE_ERODE_ Integer, between 1 and 11.  1 Meaning no Erosion process, so the Erosion process can be skipped.

_GENE_DILATE_ Integer, between 1 and 11.  1 Meaning no Dilation process, so the Dilation process can be skipped.

_GENE_THRESHOLD_ Integer, between 0 and 255.  

*EVALUATE*

Evaluate the image pre-processing with the feature detection method and compute the target_score and processing_score, where:
target_score is a piecewise function.

If a target is found and a target is present:
{{{
target_score = min(||found_target-target1||,||found_target-target2||)
}}}
If a target is found and no target is actually present:
{{{
target_score = image_width*image_height
}}}
If no target is found and a target is actually present:
{{{
target_score = image_width*image_height
}}}
If no target is found and no target is actually present:
{{{
target_score = 0
}}}
Finally, the target_score is normalized by:
{{{
target_score = target_score/(image_width*image_height)
}}}

process_score is found by:
{{{
process_score = fps/30
}}}

Finally, the composite_score is found by:
{{{
composite_score = (target_score + process_score)/2
}}}
So the composite_score will be a value between 0 and 1, with 0 being an extremely poor fitness and a 1 being an extremely good fitness.

*SELECT*

The purpose of the Selection process is to select the best candidates for reproduction, and then to kill off the worst candidates.  However, the best and worst candidates are also selected based on a probability.

This is computed on each Candidate by:
{{{
pick_score = rand*composite_score
}}}
The Candidates of a Population are sorted based on their pick_score.  The top 5 are selected for the next process, the bottom 5 are selected to be removed from the population.  Here is an example:
 
||Candidate ID||Candidate Fitness||Order Picked||W/O Probability||W/ Probability||
||8||0.961281804577743||0.922356984452706||BEST LIST||BEST LIST||
||15||0.940112792850418||0.908522507522569||BEST LIST||BEST LIST||
||3||0.96590471106005||0.710963048978148||BEST LIST||BEST LIST||
||18||0.624136069863125||0.553013583884719|| ||BEST LIST||
||5||0.796794185525096||0.489027244346831||BEST LIST||BEST LIST||
||20||0.77932326330012||0.463453471931652|| || ||
||4||0.53705606224491||0.397036806556376|| || ||
||10||0.746266099810402||0.396062687692806|| || ||
||11||0.474907967278414||0.394864873007388|| || ||
||19||0.728927182405522||0.370353680689857|| || ||
||16||0.68433667665282||0.299133142670996|| || ||
||12||0.733324690572466||0.257124053241142|| || ||
||14||0.584538125362269||0.232312571289941|| || ||
||1||0.546549748973505||0.196174704194745|| || ||
||7||0.446408716165612||0.161199391089457||WORST LIST|| ||
||17||0.204883104540485||0.143985912869939||WORST LIST||WORST LIST||
||6||0.331425911525226||0.0579843136762735||WORST LIST||WORST LIST||
||9||0.267534171917594||0.0480602279739165||WORST LIST||WORST LIST||
||13||0.130869669882969||0.0181018277015937||WORST LIST||WORST LIST||
||2||0.93578122696494||0.0157889599597072||BEST LIST||WORST LIST||

As you can see, although Candidate 2 had one of the best composite_scores, they will not be picked due to his pick_score.

*RECOMBINE*

Now with the best 5 Candidates, their Children must be created.  We use 2 different parents for this.  This is done by:
{{{
for(i=0;i<5;i++)
{
     parent_A = Candidate[ceil(rand*5)]
     parent_B = Candidate[ceil(rand*5)]
     while(parent_A == parent_B)
     {
          parent_B = Candidate[ceil(rand*5)]
     }
     for(j=0;j<GENE_COUNT;j++)
     {
          New_Candidate[i].Gene[j] = average(Parent_A.Gene[j],Parent_B.Gene[j])
     }
}
}}}


*MUTATE*

The Mutation process works by randomly mutating the New Candidate's genes by:
{{{
for(i=0;i<5;i++)
{
     for(j=0;j<GENE_COUNT;j++)
     {
          New_Candidate[i].Gene[j] = New_Candidate[i].Gene[j] + scaling_factor*(1-rand)
     }
}
}}}
= References =

http://stevenhickson.blogspot.com/2013/03/using-webcam-with-raspberry-pi.html

http://hackaday.com/2014/09/05/an-obsessively-thorough-battery-and-more-showdown/

http://www.ti.com/lit/an/snva557/snva557.pdf

http://docs.opencv.org/doc/tutorials/features2d/feature_detection/feature_detection.html

http://robocv.blogspot.com/2012/02/real-time-object-detection-in-opencv.html

http://find-object.googlecode.com/svn/trunk/find_object/example/main.cpp

https://github.com/savsun/Filters