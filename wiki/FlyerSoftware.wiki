#summary This page provides documentation on the software running on the ICARUS Flyer and/or supporting the design/analysis of the ICARUS Flyer.

= Introduction =

Add your content here.


= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages

= Software = 
== Onboard ==

=== ArduPlane Relevant Code ===
_ArduPlane.pde_
{{{
// apply desired roll, pitch and yaw to the plane 
    // ----------------------------------------------
    if (control_mode > MANUAL)
        stabilize();

    // write out the servo PWM values
    // ------------------------------
    set_servos();

    gcs_update();
    gcs_data_stream_send();
}
}}}
=== ArduCopter Relevant Code ===
_motors_quad_
{{{
if(g.frame_orientation == X_FRAME){ 
		roll_out 	 	= (float)g.rc_1.pwm_out * 0.707;
		pitch_out 	 	= (float)g.rc_2.pwm_out * 0.707;

		// left
		motor_out[MOT_3]	= g.rc_3.radio_out + roll_out + pitch_out;	// FRONT
		motor_out[MOT_2]	= g.rc_3.radio_out + roll_out - pitch_out;	// BACK

		// right
		motor_out[MOT_1]	= g.rc_3.radio_out - roll_out + pitch_out;	// FRONT
		motor_out[MOT_4] 	= g.rc_3.radio_out - roll_out - pitch_out;	// BACK

	}
}}}
{{{...}}}
{{{
// Yaw input
	motor_out[MOT_1]	+=	g.rc_4.pwm_out; 	// CCW // FR Rotor
	motor_out[MOT_2]	+=	g.rc_4.pwm_out; 	// CCW  //BL Rotor
	motor_out[MOT_3]	-=	g.rc_4.pwm_out; 	// CW  //FL Rotor
	motor_out[MOT_4] 	-=	g.rc_4.pwm_out; 	// CW  //BR Rotor

    /* We need to clip motor output at out_max. When cipping a motors
		 * output we also need to compensate for the instability by
		 * lowering the opposite motor by the same proportion. This
		 * ensures that we retain control when one or more of the motors
		 * is at its maximum output
		 */
		for (int i = MOT_1; i <= MOT_4; i++){
				if(motor_out[i] > out_max){
		            // note that i^1 is the opposite motor
					motor_out[i ^ 1] -= motor_out[i] - out_max;
					motor_out[i] = out_max;
				}
		}

	// limit output so motors don't stop
	motor_out[MOT_1]	= max(motor_out[MOT_1], 	out_min);
	motor_out[MOT_2]	= max(motor_out[MOT_2], 	out_min);
	motor_out[MOT_3]	= max(motor_out[MOT_3], 	out_min);
	motor_out[MOT_4] 	= max(motor_out[MOT_4], 	out_min);
}}}
{{{...}}}
{{{
	APM_RC.OutputCh(MOT_1, motor_out[MOT_1]);
	APM_RC.OutputCh(MOT_2, motor_out[MOT_2]);
	APM_RC.OutputCh(MOT_3, motor_out[MOT_3]);
	APM_RC.OutputCh(MOT_4, motor_out[MOT_4]);
}}}


== Analysis ==
=== APM Analyzer ===
Current Version:  1.0
This software was created in MatLab and is used to analyze the Data Logs of the DIYDrones APM (2.0 or 2.5).  If you do not have MatLab all you need for this software is the MatLab RunTime Compiler, which is free. The original source code is also available in the download.

[http://code.google.com/p/icarus-uav-system/downloads/detail?name=APMAnalyzerv1.0.zip&can=2&q= APMAnalyzer Software] 

=== AirFoil Optimizer ===
Current Version: 1.0
This software was created in MatLab and is used to help select an airfoil given constraints.  It uses the airfoil data collected from [http://www.ae.illinois.edu/m-selig/ads/coord_database.html UIUC] and you can then filter and graph the airfoil data as you see fit. If you do not have MatLab all you need for this software is the MatLab RunTime Compiler, which is free. The original source code is also available in the download.

[http://code.google.com/p/icarus-uav-system/downloads/detail?name=AirfoilOptimizerv1.0.zip&can=2&q= Airfoil Optimizer]  


= References =
[http://code.google.com/p/ardupilot-mega/downloads/list ArduPlane Repo]

[http://code.google.com/p/arducopter/downloads/list ArduCopter Repo]